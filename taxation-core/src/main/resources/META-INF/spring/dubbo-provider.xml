<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://code.alibabatech.com/schema/dubbo
        http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

	<!-- dubbo provider configuration info -->

	<!-- name: 多份部署的名字一直，表示同属该服务提供者的集群 -->
	<dubbo:application name="${dubbo.application.name}"
		owner="${dubbo.application.owner}" organization="${dubbo.application.organization}" />

	<!-- file是dubbo缓存文件: 有了这项配置后，当应用重启过程中，Dubbo注册中心不可用时则应用会从这个缓存文件读取服务提供者列表的信息，进一步保证应用可靠性 -->
	<dubbo:registry address="${dubbo.registry.address}"
		file="dubbo/output/${dubbo.application.name}.cache" />

	<!--uncomment this if you want to test dubbo's monitor -->
	<dubbo:monitor protocol="registry" />

	<!-- port：使用固定端口暴露服务，而不要使用随机端口，这样在注册中心推送有延迟的情况下，消费者通过缓存列表也能调用到原地址，保证调用成功 -->
	<dubbo:protocol name="dubbo" port="${dubbo.protocol.port}" />

	<!-- 实现rest -->
	<dubbo:protocol name="rest" port="${dubbo.protocol.rest.port}"
		server="netty" keepalive="false" iothreads="5" threads="100"
		contextpath="services"
		extension="com.taxation.dubbo.rest.support.filter.LocalContainerRequestFilter" />

	<!-- here we demonstrate both annotation-based and xml-based configs -->
	<!-- 扫描注解包路径，多个包用逗号分隔，不填pacakge表示扫描当前ApplicationContext中所有的类 -->
	<dubbo:annotation package="com.taxation.service.impl" />

</beans>